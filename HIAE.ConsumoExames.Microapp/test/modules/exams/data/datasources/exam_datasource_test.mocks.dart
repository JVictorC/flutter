// Mocks generated by Mockito 5.2.0 from annotations
// in micro_app_consumo_exame/test/modules/exams/data/datasources/exam_datasource_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;

import 'package:micro_app_consumo_exame/core/adapters/http/client_response.dart'
    as _i2;
import 'package:micro_app_consumo_exame/core/adapters/http/http_interface.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeClientResponse_0 extends _i1.Fake implements _i2.ClientResponse {}

/// A class which mocks [IHttpClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockIHttpClient extends _i1.Mock implements _i3.IHttpClient {
  MockIHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void removeRetryRequestErrorInterceptor() => super.noSuchMethod(
      Invocation.method(#removeRetryRequestErrorInterceptor, []),
      returnValueForMissingStub: null);
  @override
  _i4.Future<_i2.ClientResponse> post(String? url,
          {dynamic body,
          Map<String, dynamic>? headers,
          Map<String, dynamic>? queryParameters,
          void Function(int, int)? onSendProgress}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                url
              ], {
                #body: body,
                #headers: headers,
                #queryParameters: queryParameters,
                #onSendProgress: onSendProgress
              }),
              returnValue:
                  Future<_i2.ClientResponse>.value(_FakeClientResponse_0()))
          as _i4.Future<_i2.ClientResponse>);
  @override
  _i4.Future<_i2.ClientResponse> get(String? path,
          {Map<String, dynamic>? headers,
          Map<String, dynamic>? queryParameters}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [path],
                  {#headers: headers, #queryParameters: queryParameters}),
              returnValue:
                  Future<_i2.ClientResponse>.value(_FakeClientResponse_0()))
          as _i4.Future<_i2.ClientResponse>);
  @override
  _i4.Future<_i2.ClientResponse> delete(String? url,
          {dynamic body,
          Map<String, dynamic>? headers,
          Map<String, dynamic>? queryParameters}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                url
              ], {
                #body: body,
                #headers: headers,
                #queryParameters: queryParameters
              }),
              returnValue:
                  Future<_i2.ClientResponse>.value(_FakeClientResponse_0()))
          as _i4.Future<_i2.ClientResponse>);
  @override
  _i4.Future<_i2.ClientResponse> put(String? url,
          {dynamic body,
          Map<String, dynamic>? headers,
          Map<String, dynamic>? queryParameters}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                url
              ], {
                #body: body,
                #headers: headers,
                #queryParameters: queryParameters
              }),
              returnValue:
                  Future<_i2.ClientResponse>.value(_FakeClientResponse_0()))
          as _i4.Future<_i2.ClientResponse>);
  @override
  _i4.Future<_i2.ClientResponse> patch(String? url,
          {dynamic body,
          Map<String, dynamic>? headers,
          Map<String, dynamic>? queryParameters}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [
                url
              ], {
                #body: body,
                #headers: headers,
                #queryParameters: queryParameters
              }),
              returnValue:
                  Future<_i2.ClientResponse>.value(_FakeClientResponse_0()))
          as _i4.Future<_i2.ClientResponse>);
}
